services:
  nginx:
    image: jonasal/nginx-certbot:5.2.1-nginx1.27.0
    restart: always
    ports:
      - 80:80
      - 443:443
    # env_file:
    #   - ./nginx-certbot.env
    configs:
      - source: nginx_config
        target: /etc/nginx/user_conf.d/nginx.conf
    networks:
      - public
    # volumes:
    #   - nginx_secrets:/etc/letsencrypt
    depends_on:
      flask:
        condition: service_healthy
        restart: true
        
  flask:
    image: devendrayadav02/flask:latest
    restart: always
    build:
      context: ./../flask
      dockerfile: Dockerfile
    ports:
      - 7070:8080
    env_file:
      - dev.env
    secrets:
      - api_key
      - source: api_key
        target: /api_key.txt
    configs:
      - source: my_config
        target: /config-dev-v2.yaml
    environment:
      - APP_VERSION=0.1.0
      - PASSWORD
      - APP_TOKEN:${APP_TOKEN}
      - DB_HOST=postgres
      - DB_DATABASE=mydb
      - DB_USER=myuser
    volumes:
      - ./config-dev.yaml:/config-dev.yaml
      #- ./my-data:/data
      - flask_data:/data
    networks:
      - private
      - public
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/about"]
      interval: 5s
      retries: 5
      start_period: 15s
      timeout: 5s
  
  postgres:
    image: postgres:16.3
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: myuser
      POSTGRES_DB: mydb
      POSTGRES_PASSWORD_FILE: /run/secrets/pg_password
    secrets:
      - pg_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - private

secrets:
  api_key:
    file: api_key.txt
  pg_password:
    file: pg_password.txt

configs:
  my_config:
    file: ./config-dev.yaml
  nginx_config:
    file: ./nginx.conf

volumes:
  flask_data:
  postgres_data:

networks:
  private:
  public: